import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class MentorProfileEditPage extends StatefulWidget {
  const MentorProfileEditPage({Key? key}) : super(key: key);

  @override
  _MentorProfileEditPageState createState() => _MentorProfileEditPageState();
}

class _MentorProfileEditPageState extends State<MentorProfileEditPage> {
  late Future<Map<String, dynamic>> mentorData;
  List<Map<String, dynamic>> reviews = [];
  String? currentUserId;

  @override
  void initState() {
    super.initState();
    _loadCurrentUserId();
    mentorData = fetchMentorData();
    fetchReviews();
  }

  // Load current user ID from shared preferences
  Future<void> _loadCurrentUserId() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      currentUserId = prefs.getString('userId');
    });
  }

  // Fetch mentor data from backend
  Future<Map<String, dynamic>> fetchMentorData() async {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('userId');

    final response = await http.get(
      Uri.parse('http://192.168.159.47:3000/api/mentors/$userId'),
    );

    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Failed to load mentor data');
    }
  }

  // Fetch reviews from backend
  Future<void> fetchReviews() async {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('userId');

    final response = await http.get(
      Uri.parse('http://192.168.159.47:3000/api/reviews/$userId'),
    );

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      setState(() {
        reviews = List<Map<String, dynamic>>.from(data['reviews'].map((review) {
          return {
            'review': review['review'],
            'rating': (review['rating'] as num).toDouble(),
            'userId': review['userId']?['_id'],
            'menteeName': review['userId'] != null
                ? '${review['userId']['firstName']} ${review['userId']['lastName']}'
                : 'Anonymous',
            '_id': review['_id'],
          };
        }));
      });
    } else {
      print('Failed to fetch reviews: ${response.body}');
    }
  }

  double calculateAverageRating() {
    if (reviews.isEmpty) return 0.0;
    double sum = reviews.fold(0, (prev, element) => prev + element['rating']);
    return sum / reviews.length;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('My Profile'),
        backgroundColor: Colors.teal,
      ),
      body: FutureBuilder<Map<String, dynamic>>(
        future: mentorData,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (!snapshot.hasData || snapshot.data == null) {
            return const Center(child: Text('No data available'));
          }

          final mentor = snapshot.data!;
          double averageRating = calculateAverageRating();
          int totalReviews = reviews.length;

          return SingleChildScrollView(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Profile Image and Name
                Row(
                  children: [
                    const CircleAvatar(
                      radius: 50,
                      backgroundImage: AssetImage('assets/default.png'),
                    ),
                    const SizedBox(width: 20),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${mentor['firstName']} ${mentor['lastName'] ?? ''}',
                            style: const TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Colors.teal,
                            ),
                          ),
                          const SizedBox(height: 6),
                          Text(
                            mentor['jobTitle'] ?? 'No title',
                            style: const TextStyle(
                                fontSize: 18, color: Colors.black),
                          ),
                          const SizedBox(height: 6),
                          Row(
                            children: [
                              const Icon(Icons.star, color: Colors.amber),
                              Text(
                                ' ${averageRating.toStringAsFixed(1)} ($totalReviews reviews)',
                                style: const TextStyle(fontSize: 16),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 24),

                // Skills Section
                const Text(
                  'Skills:',
                  style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.teal),
                ),
                const SizedBox(height: 10),
                Wrap(
                  spacing: 10,
                  runSpacing: 10,
                  children:
                      (mentor['skills'] as List<dynamic>? ?? []).map((skill) {
                    return Container(
                      padding: const EdgeInsets.symmetric(
                        vertical: 10,
                        horizontal: 20,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: const [
                          BoxShadow(
                            color: Colors.black12,
                            blurRadius: 6,
                            offset: Offset(2, 2),
                          ),
                        ],
                        border: Border.all(
                          color: Colors.teal,
                          width: 1.5,
                        ),
                      ),
                      child: Text(
                        skill,
                        style: const TextStyle(
                          color: Colors.teal,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    );
                  }).toList(),
                ),
                const SizedBox(height: 24),

                // Qualifications Section
                if (mentor['qualifications'] != null) ...[
                  const Text(
                    'Qualifications:',
                    style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.teal),
                  ),
                  const SizedBox(height: 6),
                  Text(
                    mentor['qualifications'],
                    style: const TextStyle(fontSize: 16, height: 1.6),
                  ),
                  const SizedBox(height: 24),
                ],

                // Bio Section
                if (mentor['bio'] != null) ...[
                  const Text(
                    'Bio:',
                    style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.teal),
                  ),
                  const SizedBox(height: 6),
                  Text(
                    mentor['bio'],
                    style: const TextStyle(fontSize: 16, height: 1.6),
                  ),
                  const SizedBox(height: 24),
                ],

                // Reviews Section
                const Text(
                  'Reviews:',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Colors.teal,
                  ),
                ),
                const SizedBox(height: 10),
                if (reviews.isEmpty)
                  const Text(
                    'No reviews yet.',
                    style: TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ...reviews.map((review) {
                  return ListTile(
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '${review['menteeName'] ?? 'Anonymous'}',
                          style: const TextStyle(
                              fontSize: 16, color: Colors.black),
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: List.generate(5, (index) {
                            return Icon(
                              index < (review['rating'] ?? 0).toInt()
                                  ? Icons.star
                                  : Icons.star_border,
                              color: Colors.amber,
                            );
                          }),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '${review['review'] ?? 'No review available'}',
                          style: const TextStyle(fontSize: 14),
                        ),
                      ],
                    ),
                  );
                }),
              ],
            ),
          );
        },
      ),
    );
  }
}